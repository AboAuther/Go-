变量多重赋值
a,b,c,d:=10,20,30,40

匿名变量
_,a,b=10,20,30
其中_也被赋值
但是不使用

const(
  _=iota
  KB=1<<(10*iota)
  MB=1<<(10*iota)
  GB=1<<(10*iota)
  TB=1<<(10*iota)
  PB=1<<(10*iota)
)
iota在const关键字出现时将被重置为0(const内部的第一行之前)，
const中每新增一行常量声明将使iota计数一次(iota可理解为const语句块中的行索引)。

格式化输出
%B  二进制输出 
%d  十进制输出值
%o  八进制输出值
%x  16进制输出值
%t  输出类型
%v  输出值value
%s  输出字符串类型
%#v 输出值并加一个描述符

字符串的常用操作
len(str)	                            求长度
+或fmt.Sprintf	                       拼接字符串
strings.Split	                        分割
strings.contains	                    判断是否包含
strings.HasPrefix,strings.HasSuffix	  前缀/后缀判断
strings.Index(),strings.LastIndex()	  子串出现的位置
strings.Join(a[]string, sep string)	  join操作

数组赋值
array := [...]int {0,1,2,3,4,5,6,7,8,9}
[...]  3个.  可以根据后面变量的个数 自动赋值

赋值运算符
=	    简单的赋值运算符，将一个表达式的值赋给一个左值
+=	  相加后再赋值
-=	  相减后再赋值
*=	  相乘后再赋值
/=	  相除后再赋值
%=	  求余后再赋值
<<=	  左移后赋值
>>=	  右移后赋值
&=	  按位与后赋值
|=	  按位或后赋值
^=	  按位异或后赋值

位运算符
&     	参与运算的两数各对应的二进位相与。
      （两位均为1才为1）
|	      参与运算的两数各对应的二进位相或。
        （两位有一个为1就为1）
^	      参与运算的两数各对应的二进位相异或，当两对应的二进位相异时，结果为1。
      （两位不一样则为1）
<<	    左移n位就是乘以2的n次方。
        “a<<b”是把a的各二进位全部左移b位，高位丢弃，低位补0。
>>	    右移n位就是除以2的n次方。
        “a>>b”是把a的各二进位全部右移b位。
        
        
有一堆数字，如果除了一个数字以外，其他数字都出现了两次，那么如何找到出现一次的数字？
package main 
import "fmt"
func main(){
	var nums  = []int {5,7,8,8,9,7,9}
	i := 0
	for j := 0; j < len(nums); j ++ {
		i = i ^ nums[j]
	}
	fmt.Println(i)
}

Go语言中可以使用for range遍历数组、切片、字符串、map 及通道（channel）。
通过for range遍历的返回值有以下规律：
1.数组、切片、字符串返回索引和值。
2.map返回键和值。
3.通道（channel）只返回通道内的值。

switch case
使用switch语句可方便地对大量的值进行条件判断。
func switchDemo1() {
	finger := 3
	switch finger {
	case 1:
		fmt.Println("大拇指")
	case 2:
		fmt.Println("食指")
	case 3:
		fmt.Println("中指")
	case 4:
		fmt.Println("无名指")
	case 5:
		fmt.Println("小拇指")
	default:
		fmt.Println("无效的输入！")
	}
}
Go语言规定每个switch只能有一个default分支。

一个分支可以有多个值，多个case值中间使用英文逗号分隔。

func testSwitch3() {
	switch n := 7; n {
	case 1, 3, 5, 7, 9:
		fmt.Println("奇数")
	case 2, 4, 6, 8:
		fmt.Println("偶数")
	default:
		fmt.Println(n)
	}
}
分支还可以使用表达式，这时候switch语句后面不需要再跟判断变量。例如：

func switchDemo4() {
	age := 30
	switch {
	case age < 25:
		fmt.Println("好好学习吧")
	case age > 25 && age < 35:
		fmt.Println("好好工作吧")
	case age > 60:
		fmt.Println("好好享受吧")
	default:
		fmt.Println("活着真好")
	}
}
fallthrough语法可以执行满足条件的case的下一个case，是为了兼容C语言中的case设计的。

func switchDemo5() {
	s := "a"
	switch {
	case s == "a":
		fmt.Println("a")
		fallthrough
	case s == "b":
		fmt.Println("b")
	case s == "c":
		fmt.Println("c")
	default:
		fmt.Println("...")
	}
}
输出： a b

goto(跳转到指定标签)
goto语句通过标签进行代码间的无条件跳转。goto语句可以在快速跳出循环、避免重复退出上有一定的帮助。
Go语言中使用goto语句能简化一些代码的实现过程。 例如双层嵌套的for循环要退出时：
func gotoDemo1() {
	var breakFlag bool
	for i := 0; i < 10; i++ {
		for j := 0; j < 10; j++ {
			if j == 2 {
				// 设置退出标签
				breakFlag = true
				break
			}
			fmt.Printf("%v-%v\n", i, j)
		}
		// 外层for循环判断
		if breakFlag {
			break
		}
	}
}
使用goto语句能简化代码：
func gotoDemo2() {
	for i := 0; i < 10; i++ {
		for j := 0; j < 10; j++ {
			if j == 2 {
				// 设置退出标签
				goto breakTag
			}
			fmt.Printf("%v-%v\n", i, j)
		}
	}
	return
	// 标签
breakTag:
	fmt.Println("结束for循环")
}

                        break(跳出循环)
break语句可以结束for、switch和select的代码块。
break语句还可以在语句后面添加标签，表示退出某个标签对应的代码块，标签要求必须定义在对应的for、switch和 select的代码块上。 举个例子：
func breakDemo1() {
BREAKDEMO1:
	for i := 0; i < 10; i++ {
		for j := 0; j < 10; j++ {
			if j == 2 {
				break BREAKDEMO1
			}
			fmt.Printf("%v-%v\n", i, j)
		}
	}
	fmt.Println("...")
}


                  continue(继续下次循环)
continue语句可以结束当前循环，开始下一次的循环迭代过程，仅限在for循环内使用。
continue语句后添加标签时，表示开始标签对应的循环。例如：
func continueDemo() {
forloop1:
	for i := 0; i < 5; i++ {
		// forloop2:
		for j := 0; j < 5; j++ {
			if i == 2 && j == 2 {
				continue forloop1
			}
			fmt.Printf("%v-%v\n", i, j)
		}
	}
}
