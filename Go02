Go语言 遍历数组
1.普通的遍历
func main() {
	arr()
}
func arr() {
	arr1 := [5]int{1, 2, 3, 4, 5}
	for i := 0; i < len(arr1); i++ {
		fmt.Println(arr1[i])
	}
}

使用range遍历
Go 语言中 range 关键字用于
for循环中迭代数组(array)、切片(slice)、链表(channel)或集合(map)的元素；
在数组和切片中它返回元素的索引值，
在集合中返回 key-value 对的 key 值。
package main
import "fmt"
func main() {
	arr()
}
func arr() {
	arr1 := [5]string{"a", "b", "c", "d", "e"}
	for k, v := range arr1 {
		fmt.Printf("key:%d      value:%s\n", k, v)
	}
}


切片
切片表达式从字符串、数组、指向数组或切片的指针构造子字符串或切片。
简单切片表达式
切片的底层就是一个数组，所以我们可以基于数组通过切片表达式得到切片。
切片表达式中的low和high表示一个索引范围（左包含，右不包含），
也就是下面代码中从数组a中选出  1<=索引值<4  的元素组成切片s，
得到的切片长度=high-low，容量等于得到的    切片的底层数组的容量。
func main() {
	a := [5]int{1, 2, 3, 4, 5}
	s := a[1:3]  // s := a[low:high]
	fmt.Printf("s:%v len(s):%v cap(s):%v\n", s, len(s), cap(s))
}
输出：s:[2 3] len(s):2 cap(s):4

为了方便起见，可以省略切片表达式中的任何索引。省略了low则默认为0；省略了high则默认为切片操作数的长度:
a[2:]  // 等同于 a[2:len(a)]
a[:3]  // 等同于 a[0:3]
a[:]   // 等同于 a[0:len(a)]

对于数组或字符串，如果0 <= low <= high <= len(a)，则索引合法，否则就会索引越界（out of range）
它有两种变体：一种指定low和high两个索引界限值的简单的形式，另一种是除了low和high索引界限值外还指定容量的完整的形式。
